broker = <%= @is_broker %>
domain = <%= @domain_name %>
domainPassword = <%= @domain_password %>
port = <%= @port %>
<% 
  peers = Array.new
  # Go to great lengths to make sure we don't peer to ourself.
  local_addresses = Array.new
  scope.lookupvar('::interfaces').split(",").each do |interface|
    local_addresses.push(scope["::" + ['ipaddress', interface].join("_")])
  end
  # Some other addresses we don't want to bind to
  local_addresses.push(scope.lookupvar('::fqdn'))
  local_addresses.push(scope.lookupvar('::hostname'))
  local_addresses.push("localhost")
  if @altAddr.length() > 0
    local_addresses.push(@altAddr)
  end

  @brokers.each do |host| 
    if host.split(":").length() > 1 
      hostname = host.split(":")[0].lstrip.rstrip
    else
      hostname = host.lstrip.rstrip
    end
    if ! local_addresses.include?(hostname)
      peers << host
    end
  end
  if peers.length() > 0
-%>
peer = <%= peers.join(",") %>
<% end -%> 
<% if @altAddr.length() > 0 -%>
advertiseAlt = true
altAddr = <%= @altAddr %>
tags = Name=<%= @altAddr %>
<% else -%>
tags = Name=<%= @fqdn %>
<% end -%>
region = <%= @region %>
log = <%= @log_level %>
portRange = <%= @portRange %>
enableAutomation = <%= @enableAutomation %>
enableAutomationBootstrap = <%= @enableAutomationBootstrap %>
automationTemplate = <%= @automationTemplate %>
balancer = <%= @balancer %>


# A flag specifying whether host level statistics should be collected using
# sigar. The default is inferred from the property "enableAutomation"
#enableHostStats =

# When "enableAutomation" is set, prune metrics by age. Default is 4 hours: 4h
# Supported Units are d=day, h=hour, m=minute.
#metricsPurgeAge =

# When "enableAutomation" is set, prune events by age. Default is 7 days: 7d
#eventsPurgeAge =

# The interval (in seconds) that brokers should wait between sending out UDP
# broadcast messages for local discovery, and that agents should wait to hear
# those messages on startup. By default broadcast is turned off so peering
# is done using the 'peer' property.
# broadcast = 1

# A flag specifying whether nuodb instances can only be started through this
# agent (as opposed to directly starting a nuodb process on the system). If this
# flag is true then a "connection key" is required of all nuodb instances. A
# connection key is only available if the process was started through a request
# on the agent. This is a good best-practice flag for locking down a system.
#requireConnectKey = false

